/**
 * Manticore SDK
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.6
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['../ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ManticoreSdk) {
      root.ManticoreSdk = {};
    }
    root.ManticoreSdk.KWithPendingTradesApi = factory(root.ManticoreSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * KWithPendingTrades service.
   * @module api/KWithPendingTradesApi
   * @version 0.2.6
   */

  /**
   * Constructs a new KWithPendingTradesApi.
   * @alias module:api/KWithPendingTradesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getV2KWithPendingTrades operation.
     * @callback module:api/KWithPendingTradesApi~getV2KWithPendingTradesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get K data with pending trades, which are the trades not included in K data yet, because there&#39;s delay between trade generated and processed by K data generator.
     * Get K data with pending trades, which are the trades not included in K data yet, because there&#39;s delay between trade generated and processed by K data generator.
     * @param {module:model/String} market Unique market id. It&#39;s always in the form of xxxyyy, where xxx is the base currency code, yyy is the quote currency code, e.g. &#39;btcusd&#39;. All available markets can be found at /api/markets.
     * @param {Number} tradeId The trade id of the first trade you received.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of returned data points, default to 30. (default to 30)
     * @param {module:model/Number} opts.period Time period of K line, default to 1. You can choose between 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080 (default to 1)
     * @param {Number} opts.timestamp An integer represents the seconds elapsed since Unix epoch. If set, only k-line data after that time will be returned.
     * @param {module:api/KWithPendingTradesApi~getV2KWithPendingTradesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getV2KWithPendingTrades = function(market, tradeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'market' is set
      if (market === undefined || market === null) {
        throw new Error("Missing the required parameter 'market' when calling getV2KWithPendingTrades");
      }

      // verify the required parameter 'tradeId' is set
      if (tradeId === undefined || tradeId === null) {
        throw new Error("Missing the required parameter 'tradeId' when calling getV2KWithPendingTrades");
      }


      var pathParams = {
      };
      var queryParams = {
        'market': market,
        'trade_id': tradeId,
        'limit': opts['limit'],
        'period': opts['period'],
        'timestamp': opts['timestamp']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/k_with_pending_trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
