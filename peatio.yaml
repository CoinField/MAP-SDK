---
swagger: "2.0"
info:
  version: "0.2.6"
  title: "Manticore SDK"
host: "localhost:8000"
basePath: "/api/v2"
schemes:
  - http
  - https
tags:
- name: "markets"
  description: "Operations about markets"
- name: "tickers"
  description: "Operations about tickers"
- name: "members"
  description: "Operations about members"
- name: "deposits"
  description: "Operations about deposits"
- name: "deposit"
  description: "Operations about deposits"
- name: "depositAddress"
  description: "Operations about deposit addresses"
- name: "orders"
  description: "Operations about orders"
- name: "order"
  description: "Operations about orders"
- name: "orderBook"
  description: "Operations about order books"
- name: "depth"
  description: "Operations about depths"
- name: "trades"
  description: "Operations about trades"
- name: "k"
  description: "Operations about k"
- name: "kWithPendingTrades"
  description: "Operations about k with pending trades"
- name: "timestamp"
  description: "Operations about timestamps"
produces:
- "application/json"
paths:
  /markets:
    get:
      tags:
      - "markets"
      summary: "Get all available markets."
      description: "Get all available markets."
      operationId: "getV2Markets"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Get all available markets."
          schema:
            type: array
            items:
              $ref: "#/definitions/Market"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
  /tickers:
    get:
      tags:
      - "tickers"
      summary: "Get ticker of all markets."
      description: "Get ticker of all markets."
      operationId: "getV2Tickers"
      produces:
      - "application/json"
      parameters: []
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get ticker of all markets."
          schema:
            type: object
            additionalProperties:
              $ref: "#/definitions/TickerInfo"
  /tickers/{market}:
    get:
      tags:
      - "tickers"
      summary: "Get ticker of specific market."
      description: "Get ticker of specific market."
      operationId: "getV2TickersMarket"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "path"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum: ["btcusd", "xrpusd", "btcxrp"]
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get ticker of specific market."
          schema:
            type: object
            $ref: "#/definitions/TickerInfo"
  /members/me:
    get:
      tags:
      - "members"
      summary: "Get your profile and accounts info."
      description: "Get your profile and accounts info."
      operationId: "getV2MembersMe"
      produces:
      - "application/json"
      parameters: []
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get your profile and accounts info."
          schema:
            $ref: "#/definitions/Member"
  /deposits:
    get:
      tags:
      - "deposits"
      summary: "Get your deposits history."
      description: "Get your deposits history."
      operationId: "getV2Deposits"
      produces:
      - "application/json"
      parameters:
      - name: "currency"
        in: "query"
        description: "Currency value contains  usd,btc,xrp"
        required: false
        type: "string"
        enum: ["usd", "btc", "xrp"]
      - name: "limit"
        in: "query"
        description: "Set result limit."
        required: false
        type: "integer"
        default: 3
        format: "int32"
      - name: "state"
        in: "query"
        required: false
        type: "string"
        enum:
        - "submitting"
        - "cancelled"
        - "submitted"
        - "rejected"
        - "accepted"
        - "checked"
        - "warning"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get your deposits history."
  /deposit:
    get:
      tags:
      - "deposit"
      summary: "Get details of specific deposit."
      description: "Get details of specific deposit."
      operationId: "getV2Deposit"
      produces:
      - "application/json"
      parameters:
      - name: "txid"
        in: "query"
        required: true
        type: "string"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get details of specific deposit."
  /deposit_address:
    get:
      tags:
      - "depositAddress"
      summary: "Where to deposit. The address field could be empty when a new address\
        \ is generating (e.g. for bitcoin), you should try again later in that case."
      description: "Where to deposit. The address field could be empty when a new\
        \ address is generating (e.g. for bitcoin), you should try again later in\
        \ that case."
      operationId: "getV2DepositAddress"
      produces:
      - "application/json"
      parameters:
      - name: "currency"
        in: "query"
        description: "The account to which you want to deposit. Available values:\
          \ usd, btc, xrp"
        required: true
        type: "string"
        enum: ["usd", "btc", "xrp"]
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Where to deposit. The address field could be empty when a\
            \ new address is generating (e.g. for bitcoin), you should try again later\
            \ in that case."
  /orders:
    get:
      tags:
      - "orders"
      summary: "Get your orders, results is paginated."
      description: "Get your orders, results is paginated."
      operationId: "getV2Orders"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum: ["btcusd", "xrpusd", "btcxrp"]
      - name: "state"
        in: "query"
        description: "Filter order by state, default to 'wait' (active orders)."
        required: false
        type: "string"
        default: "wait"
        enum:
        - "wait"
        - "done"
        - "cancel"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned orders, default to 100."
        required: false
        type: "integer"
        default: 100
        format: "int32"
      - name: "page"
        in: "query"
        description: "Specify the page of paginated results."
        required: false
        type: "integer"
        default: 1
        format: "int32"
      - name: "order_by"
        in: "query"
        description: "If set, returned orders will be sorted in specific order, default\
          \ to 'asc'."
        required: false
        type: "string"
        default: "asc"
        enum: ["asc", "desc"]
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get your orders, results is paginated."
    post:
      tags:
      - "orders"
      summary: "Create a Sell/Buy order."
      description: "Create a Sell/Buy order."
      operationId: "postV2Orders"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "formData"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum: ["btcusd", "xrpusd", "btcxrp"]
      - name: "side"
        in: "formData"
        description: "Either 'sell' or 'buy'."
        required: true
        type: "string"
        enum: ["sell", "buy"]
      - name: "volume"
        in: "formData"
        description: "The amount user want to sell/buy. An order could be partially\
          \ executed, e.g. an order sell 5 btc can be matched with a buy 3 btc order,\
          \ left 2 btc to be sold; in this case the order's volume would be '5.0',\
          \ its remaining_volume would be '2.0', its executed volume is '3.0'."
        required: true
        type: "string"
      - name: "price"
        in: "formData"
        description: "Price for each unit. e.g. If you want to sell/buy 1 btc at 3000\
          \ USD, the price is '3000.0'"
        required: false
        type: "string"
      - name: "ord_type"
        in: "formData"
        required: false
        type: "string"
        enum:
        - "limit"
        - "market"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        201:
          description: "Create a Sell/Buy order."
  /orders/multi:
    post:
      tags:
      - "orders"
      summary: "Create multiple sell/buy orders."
      description: "Create multiple sell/buy orders."
      operationId: "postV2OrdersMulti"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "formData"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "orders[side]"
        in: "formData"
        description: "Either 'sell' or 'buy'."
        required: true
        type: "array"
        items:
          type: "string"
        enum:
        - "sell"
        - "buy"
      - name: "orders[volume]"
        in: "formData"
        description: "The amount user want to sell/buy. An order could be partially\
          \ executed, e.g. an order sell 5 btc can be matched with a buy 3 btc order,\
          \ left 2 btc to be sold; in this case the order's volume would be '5.0',\
          \ its remaining_volume would be '2.0', its executed volume is '3.0'."
        required: true
        type: "array"
        items:
          type: "string"
      - name: "orders[price]"
        in: "formData"
        description: "Price for each unit. e.g. If you want to sell/buy 1 btc at 3000\
          \ USD, the price is '3000.0'"
        required: false
        type: "array"
        items:
          type: "string"
      - name: "orders[ord_type]"
        in: "formData"
        required: false
        type: "array"
        items:
          type: "string"
        enum:
        - "limit"
        - "market"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        201:
          description: "Create multiple sell/buy orders."
  /orders/clear:
    post:
      tags:
      - "orders"
      summary: "Cancel all my orders."
      description: "Cancel all my orders."
      operationId: "postV2OrdersClear"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "side"
        in: "formData"
        description: "If present, only sell orders (asks) or buy orders (bids) will\
          \ be canncelled."
        required: false
        type: "string"
        enum: ["sell", "buy"]
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        201:
          description: "Cancel all my orders."
  /order:
    get:
      tags:
      - "order"
      summary: "Get information of specified order."
      description: "Get information of specified order."
      operationId: "getV2Order"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique order id."
        required: true
        type: "integer"
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get information of specified order."
  /order/delete:
    post:
      tags:
      - "order"
      summary: "Cancel an order."
      description: "Cancel an order."
      operationId: "postV2OrderDelete"
      consumes:
      - "application/json"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "formData"
        description: "Unique order id."
        required: true
        type: "integer"
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        201:
          description: "Cancel an order."
  /order_book:
    get:
      tags:
      - "orderBook"
      summary: "Get the order book of specified market."
      description: "Get the order book of specified market."
      operationId: "getV2OrderBook"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "asks_limit"
        in: "query"
        description: "Limit the number of returned sell orders. Default to 20."
        required: false
        type: "integer"
        default: 20
        format: "int32"
      - name: "bids_limit"
        in: "query"
        description: "Limit the number of returned buy orders. Default to 20."
        required: false
        type: "integer"
        default: 20
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get the order book of specified market."
  /depth:
    get:
      tags:
      - "depth"
      summary: "Get depth or specified market. Both asks and bids are sorted from\
        \ highest price to lowest."
      description: "Get depth or specified market. Both asks and bids are sorted from\
        \ highest price to lowest."
      operationId: "getV2Depth"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned price levels. Default to 300."
        required: false
        type: "integer"
        default: 300
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get depth or specified market. Both asks and bids are sorted\
            \ from highest price to lowest."
  /trades:
    get:
      tags:
      - "trades"
      summary: "Get recent trades on market, each trade is included only once. Trades\
        \ are sorted in reverse creation order."
      description: "Get recent trades on market, each trade is included only once.\
        \ Trades are sorted in reverse creation order."
      operationId: "getV2Trades"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned trades. Default to 50."
        required: false
        type: "integer"
        default: 50
        format: "int32"
      - name: "timestamp"
        in: "query"
        description: "An integer represents the seconds elapsed since Unix epoch.\
          \ If set, only trades executed before the time will be returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "from"
        in: "query"
        description: "Trade id. If set, only trades created after the trade will be\
          \ returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "to"
        in: "query"
        description: "Trade id. If set, only trades created before the trade will\
          \ be returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "order_by"
        in: "query"
        description: "If set, returned trades will be sorted in specific order, default\
          \ to 'desc'."
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get recent trades on market, each trade is included only once.\
            \ Trades are sorted in reverse creation order."
  /trades/my:
    get:
      tags:
      - "trades"
      summary: "Get your executed trades. Trades are sorted in reverse creation order."
      description: "Get your executed trades. Trades are sorted in reverse creation\
        \ order."
      operationId: "getV2TradesMy"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned trades. Default to 50."
        required: false
        type: "integer"
        default: 50
        format: "int32"
      - name: "timestamp"
        in: "query"
        description: "An integer represents the seconds elapsed since Unix epoch.\
          \ If set, only trades executed before the time will be returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "from"
        in: "query"
        description: "Trade id. If set, only trades created after the trade will be\
          \ returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "to"
        in: "query"
        description: "Trade id. If set, only trades created before the trade will\
          \ be returned."
        required: false
        type: "integer"
        format: "int32"
      - name: "order_by"
        in: "query"
        description: "If set, returned trades will be sorted in specific order, default\
          \ to 'desc'."
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get your executed trades. Trades are sorted in reverse creation\
            \ order."
  /k:
    get:
      tags:
      - "k"
      summary: "Get OHLC(k line) of specific market."
      description: "Get OHLC(k line) of specific market."
      operationId: "getV2K"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned data points, default to 30."
        required: false
        type: "integer"
        default: 30
        maximum: 10000
        minimum: 1
        format: "int32"
      - name: "period"
        in: "query"
        description: "Time period of K line, default to 1. You can choose between\
          \ 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080"
        required: false
        type: "integer"
        default: 1
        format: "int32"
        enum: [1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080]
      - name: "timestamp"
        in: "query"
        description: "An integer represents the seconds elapsed since Unix epoch.\
          \ If set, only k-line data after that time will be returned."
        required: false
        type: "integer"
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get OHLC(k line) of specific market."
  /k_with_pending_trades:
    get:
      tags:
      - "kWithPendingTrades"
      summary: "Get K data with pending trades, which are the trades not included\
        \ in K data yet, because there's delay between trade generated and processed\
        \ by K data generator."
      description: "Get K data with pending trades, which are the trades not included\
        \ in K data yet, because there's delay between trade generated and processed\
        \ by K data generator."
      operationId: "getV2KWithPendingTrades"
      produces:
      - "application/json"
      parameters:
      - name: "market"
        in: "query"
        description: "Unique market id. It's always in the form of xxxyyy, where xxx\
          \ is the base currency code, yyy is the quote currency code, e.g. 'btcusd'.\
          \ All available markets can be found at /api/markets."
        required: true
        type: "string"
        enum:
        - "btcusd"
        - "xrpusd"
        - "btcxrp"
      - name: "trade_id"
        in: "query"
        description: "The trade id of the first trade you received."
        required: true
        type: "integer"
        format: "int32"
      - name: "limit"
        in: "query"
        description: "Limit the number of returned data points, default to 30."
        required: false
        type: "integer"
        default: 30
        maximum: 10000
        minimum: 1
        format: "int32"
      - name: "period"
        in: "query"
        description: "Time period of K line, default to 1. You can choose between\
          \ 1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080"
        required: false
        type: "integer"
        default: 1
        format: "int32"
        enum: [1, 5, 15, 30, 60, 120, 240, 360, 720, 1440, 4320, 10080]
      - name: "timestamp"
        in: "query"
        description: "An integer represents the seconds elapsed since Unix epoch.\
          \ If set, only k-line data after that time will be returned."
        required: false
        type: "integer"
        format: "int32"
      security:
        - jwt:
          - "write:manticore"
          - "read:manticore"
      responses:
        200:
          description: "Get K data with pending trades, which are the trades not included\
            \ in K data yet, because there's delay between trade generated and processed\
            \ by K data generator."
  /timestamp:
    get:
      tags:
      - timestamp
      summary: Get server current time, in seconds since Unix epoch.
      description: Get server current time, in seconds since Unix epoch.
      operationId: timestamp
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Get server current time, in seconds since Unix epoch.
          schema:
            type: integer
securityDefinitions:
  jwt:
    type: oauth2
    authorizationUrl: "https://demo.manticore.tech/auth/auth0"
    flow: "implicit"
    scopes:
      write:manticore: "base write scope"
      read:manticore: "base read scope"
definitions:
  Account:
    type: object
    properties:
      currency:
        type: string
        enum:
          - usd
          - btc
          - xrp
      balance:
        type: number
        example: 0.0
      locked:
        type: number
        example: 0.0
  Member:
    type: object
    properties:
      sn:
        type: string
        example: PEAUV8S2JNPTIO
      name:
        type: string
        example: John Doe
      email:
        type: string
        example: jdoe@manticore.tech
      accounts:
        type: array
        items:
          $ref: "#/definitions/Account"
  Market:
    type: object
    properties:
      id:
        type: string
        example: btcusd
      name:
        type: string
        example: BTC/USD
  TickerInfo:
    type: object
    properties:
      at:
        type: integer
        example: 1515672822
      ticker:
        type: object
        properties:
          buy:
            type: number
            example: 3000.0
          sell:
            type: number
            example: 3100.0
          low:
            type: number
            example: 3000.0
          high:
            type: number
            example: 3000.0
          last:
            type: number
            example: 3000.0
          vol:
            type: number
            example: 0.11
